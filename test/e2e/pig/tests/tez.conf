#!/usr/bin/env perl

############################################################################
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

###############################################################################
# Nightly tests for pig.
#
#

#PigSetup::setup();

#my $me = `whoami`;
#chomp $me;

$cfg = {
        'driver' => 'Pig',
        'nummachines' => 5,

        'groups' => [
                {
                'name' => 'Checkin',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
store a into ':OUTPATH:';\,
                        },
                        {
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k';
store a into ':OUTPATH:';\,
                        },
                        {
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = filter a by age>30;
c = group b by name;
d = foreach c generate group, COUNT(b) as count;
e = group d by count;
f = foreach e generate group, COUNT(d);
store f into ':OUTPATH:';\,
                        },
                  ]
                },
                {
                'name' => 'Register',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
register :PIGGYBANKPATH:/piggybank.jar
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = foreach a generate org.apache.pig.piggybank.evaluation.IsNumeric(name), org.apache.pig.piggybank.evaluation.IsNumeric(age);
store b into ':OUTPATH:';\,
                        },
                  ]
                },
                {
                'name' => 'Operators',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = limit a 100;
store b into ':OUTPATH:';\,
                        },
                        {
                        # Distinct
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = foreach a generate age;
c = distinct b;
d = filter c by age > 30;
store d into ':OUTPATH:';\,
                        },
                        {
                        # Distinct with algebraic udf combiner optimization
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = group a by age;
c = foreach b {
      x = distinct a;
      generate COUNT(x);
};
store c into ':OUTPATH:';\,
                        },
                        {
                        # Order by simple
                        'num' => 4,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = order a by age parallel 2;
store b into ':OUTPATH:';\,
                        'sortArgs' => ['-t', '	', '-k', '2,2'],
                        },
                        {
                        # Order by simple no schema
                        'num' => 5,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k';
b = order a by $1;
store b into ':OUTPATH:';\,
                        'sortArgs' => ['-t', '	', '-k', '2,2'],
                        },
                        {
                        # Order by after group
                        'num' => 6,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = group a by name;
c = foreach b generate group, ROUND( AVG(a.gpa) ) as avg_gpa;
d = order c by avg_gpa parallel 2;
store d into ':OUTPATH:';\,
                        'sortArgs' => ['-t', '	', '-k', '2,2'],
                        },
                        {
                        'num' => 7,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = sample a 1;
store b into ':OUTPATH:';\,
                        },
                        {
                        'num' => 8,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
c = union onschema a, b parallel 2;
store c into ':OUTPATH:';\,
                        },
                        {
                        # Descending order by string
                        'num' => 9,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = order a by name desc parallel 2;
store b into ':OUTPATH:';\,
                        },
                  ]
                },
                {
                'name' => 'Join',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
b = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
c = filter a by age < 20;
d = filter b by age < 20;
e = join c by name, d by name;
store e into ':OUTPATH:';\,
                        },
                        {
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab20m' as (name, age, gpa);
b = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
c = filter a by age < 20;
d = filter b by age < 20;
e = join c by name, d by name using 'replicated';
store e into ':OUTPATH:';\,
                        },
                        {
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab20m' as (name, age, gpa);
b = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
c = filter a by age < 20;
d = filter b by age < 20;
e = join c by name LEFT OUTER, d by name using 'replicated';
store e into ':OUTPATH:';\,
                        },
                        # Simplest merge-join.
                        {
                        'num' => 4,
                        'pig' => q\a = load ':INPATH:/singlefile/studenttab10k';
                                        b = load ':INPATH:/singlefile/votertab10k';
                                        c = order a by $0;
                                        d = order b by $0;
                                        store c into ':OUTPATH:.intermediate1';
                                        store d into ':OUTPATH:.intermediate2';
                                        exec;
                                        e = load ':OUTPATH:.intermediate1';
                                        f = load ':OUTPATH:.intermediate2';
                                        g = join e by $0, f by $0 using 'merge';
                                        store g into ':OUTPATH:';\,
                        'notmq' => 1,
                        },
                        # Merge-join with right-side filter
                        {
                        'num' => 5,
                        'pig' => q\a = load ':INPATH:/singlefile/studenttab10k';
                                        b = load ':INPATH:/singlefile/votertab10k';
                                        c = order a by $0;
                                        d = order b by $0;
                                        store c into ':OUTPATH:.intermediate1';
                                        store d into ':OUTPATH:.intermediate2';
                                        exec;
                                        e = load ':OUTPATH:.intermediate1';
                                        f = load ':OUTPATH:.intermediate2';
                                        i = filter f by $2 != 'democrat';
                                        g = join e by $0, i by $0 using 'merge';
                                        store g into ':OUTPATH:';\,
                        'notmq' => 1,
                        },
                        # Merge-join with schemas
                        {
                        'num' => 6,
                        'floatpostprocess' => 1,
                        'delimiter' => '	',
                        'pig' => q\a = load ':INPATH:/singlefile/studenttab10k';
                                        b = load ':INPATH:/singlefile/votertab10k';
                                        c = order a by $0;
                                        d = order b by $0;
                                        store c into ':OUTPATH:.intermediate1';
                                        store d into ':OUTPATH:.intermediate2';
                                        exec;
                                        e = load ':OUTPATH:.intermediate1'  as (name:chararray, age:int, gpa:float);
                                        f = load ':OUTPATH:.intermediate2'  as (name:chararray, age:int, reg:chararray, contrib:float);
                                        g = join e by $0, f by $0 using 'merge';
                                        store g into ':OUTPATH:';\,
                        'notmq' => 1,
                        },
                  ]
                },
                {
                'name' => 'Stream',
                'tests' => [
                        {
                        # Test with session reuse enabled across an exec boundary
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse true;
DEFINE cmd `wc -l students` CACHE(':INPATH:/singlefile/studenttab10k#students');
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = stream a through cmd;
store b into ':OUTPATH:.intermediate';
exec;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = stream a through cmd;
store b into ':OUTPATH:';
exec;\,
                        'notmq' => 1,
                        },
                        # The following tests are all imported from the comprehensive tests
                        # in streaming.conf and are meant as a sanity-check for STREAM in Tez.
                        {
                        # Section 1.2: perl script that takes parameters; explicit ship of script (Section 2.1)
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
define CMD `perl PigStreaming.pl - -` ship(':SCRIPTHOMEPATH:/PigStreaming.pl') stderr('CMD' limit 1);
A = load ':INPATH:/singlefile/studenttab10k';
B = foreach A generate $0, $1, $2;
C = stream B through CMD;
store C into ':OUTPATH:';\,
                        'sql' => "select name, age, gpa from studenttab10k;",   
                        },
                        {
                        # Section 2.2: script is shipped while the supporting file is cached
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
define CMD `perl PigStreaming.pl - - nameMap` ship(':SCRIPTHOMEPATH:/PigStreaming.pl') cache(':INPATH:/nameMap/part-00000#nameMap');
A = load ':INPATH:/singlefile/studenttab10k';
B = foreach A generate $0;
C = stream B through CMD as (name);
D = group C by name;
E = foreach D generate group, COUNT(C);
store E into ':OUTPATH:';\,
                        'sql' => "select upper(name) as nm, count(*) from studenttab10k group by nm;",  
                        },
                        {
                        # Section 3.1: use of custom serializer and deserializer
                        'num' => 4,
                        'pig' => q\set pig.tez.session.reuse false;
register :FUNCPATH:/testudf.jar;
define CMD `perl PigStreaming.pl` input(stdin using org.apache.pig.test.udf.streaming.StreamingDump) output(stdout using org.apache.pig.test.udf.streaming.DumpStreamer) ship(':SCRIPTHOMEPATH:/PigStreaming.pl');
A = load ':INPATH:/singlefile/studenttab10k';
B = stream A through CMD as (name, age, gpa);
C = foreach B generate name, age;
store C into ':OUTPATH:';\,
                        'sql' => "select name, age from studenttab10k;",    
                        }
                  ]
                },
                {
                'name' => 'LoaderStorer',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse true;
register :PIGPATH:/build/ivy/lib/Pig/avro-mapred-1.7.5.jar
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
store a into ':OUTPATH:.intermediate' using AvroStorage();
exec
b = load ':OUTPATH:.intermediate' using AvroStorage();
c = filter b by age>30;
store c into ':OUTPATH:';\,
                        'notmq' => 1,
                        },
                  ]
                }
         ]
       }
