#!/usr/bin/env perl

############################################################################
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

###############################################################################
# Nightly tests for pig.
#
#

#PigSetup::setup();

#my $me = `whoami`;
#chomp $me;

$cfg = {
        'driver' => 'Pig',
        'nummachines' => 5,

        'groups' => [
                {
                'name' => 'Checkin',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
store a into ':OUTPATH:';\,
                        },
                        {
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k';
store a into ':OUTPATH:';\,
                        },
                        {
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = filter a by age>30;
c = group b by name;
d = foreach c generate group, COUNT(b) as count;
e = group d by count;
f = foreach e generate group, COUNT(d);
store f into ':OUTPATH:';\,
                        },
                  ]
                },
                {
                'name' => 'Register',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
register :PIGGYBANKPATH:/piggybank.jar
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = foreach a generate org.apache.pig.piggybank.evaluation.IsNumeric(name), org.apache.pig.piggybank.evaluation.IsNumeric(age);
store b into ':OUTPATH:';\,
                        },
                  ]
                },
                {
                'name' => 'Operators',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = limit a 100;
store b into ':OUTPATH:';\,
                        },
                        {
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = foreach a generate age;
c = distinct b;
d = filter c by age > 30;
store d into ':OUTPATH:';\,
                        },
                        {
                        # Order by simple
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = order a by age parallel 2;
store b into ':OUTPATH:';\,
                        'sortArgs' => ['-t', '	', '-k', '2,2'],
                        },
                        {
                        # Order by simple no schema
                        'num' => 4,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k';
b = order a by $1;
store b into ':OUTPATH:';\,
                        'sortArgs' => ['-t', '	', '-k', '2,2'],
                        },
                        {
                        # Order by after group
                        'num' => 5,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = group a by name;
c = foreach b generate group, ROUND( AVG(a.gpa) ) as avg_gpa;
d = order c by avg_gpa parallel 2;
store d into ':OUTPATH:';\,
                        'sortArgs' => ['-t', '	', '-k', '2,2'],
                        },
                        {
                        'num' => 6,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = sample a 1;
store b into ':OUTPATH:';\,
                        },
                        {
                        'num' => 7,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
c = union onschema a, b parallel 2;
store c into ':OUTPATH:';\,
                        },
                        {
                        # Descending order by string
                        'num' => 8,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
b = order a by name desc parallel 2;
store b into ':OUTPATH:';\,
                        },
                  ]
                },
                {
                'name' => 'Join',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
b = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
c = filter a by age < 20;
d = filter b by age < 20;
e = join c by name, d by name;
store e into ':OUTPATH:';\,
                        },
                        {
                        'num' => 2,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab20m' as (name, age, gpa);
b = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
c = filter a by age < 20;
d = filter b by age < 20;
e = join c by name, d by name using 'replicated';
store e into ':OUTPATH:';\,
                        },
                        {
                        'num' => 3,
                        'pig' => q\set pig.tez.session.reuse false;
a = load ':INPATH:/singlefile/studenttab20m' as (name, age, gpa);
b = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
c = filter a by age < 20;
d = filter b by age < 20;
e = join c by name LEFT OUTER, d by name using 'replicated';
store e into ':OUTPATH:';\,
                        }
                  ]
                },
                {
                'name' => 'LoaderStorer',
                'tests' => [
                        {
                        'num' => 1,
                        'pig' => q\set pig.tez.session.reuse true;
register :PIGPATH:/build/ivy/lib/Pig/avro-mapred-1.7.4.jar
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:double);
store a into ':OUTPATH:.intermediate' using AvroStorage();
exec
b = load ':OUTPATH:.intermediate' using AvroStorage();
c = filter b by age>30;
store c into ':OUTPATH:';\,
                        'notmq' => 1,
                        },
                  ]
                }
         ]
       }
